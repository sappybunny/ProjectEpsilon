//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/TurnControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TurnControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TurnControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TurnControls"",
    ""maps"": [
        {
            ""name"": ""TurnControlsMap"",
            ""id"": ""aaf8d87f-bb24-4fa5-a8b4-8bb4d8b7efe2"",
            ""actions"": [
                {
                    ""name"": ""StartTurn"",
                    ""type"": ""Button"",
                    ""id"": ""78192e35-e55e-4679-86a7-a1409d8f610e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e284ac28-4141-4fd1-a344-b9113dbf4123"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TurnControlsMap
        m_TurnControlsMap = asset.FindActionMap("TurnControlsMap", throwIfNotFound: true);
        m_TurnControlsMap_StartTurn = m_TurnControlsMap.FindAction("StartTurn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TurnControlsMap
    private readonly InputActionMap m_TurnControlsMap;
    private List<ITurnControlsMapActions> m_TurnControlsMapActionsCallbackInterfaces = new List<ITurnControlsMapActions>();
    private readonly InputAction m_TurnControlsMap_StartTurn;
    public struct TurnControlsMapActions
    {
        private @TurnControls m_Wrapper;
        public TurnControlsMapActions(@TurnControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartTurn => m_Wrapper.m_TurnControlsMap_StartTurn;
        public InputActionMap Get() { return m_Wrapper.m_TurnControlsMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TurnControlsMapActions set) { return set.Get(); }
        public void AddCallbacks(ITurnControlsMapActions instance)
        {
            if (instance == null || m_Wrapper.m_TurnControlsMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TurnControlsMapActionsCallbackInterfaces.Add(instance);
            @StartTurn.started += instance.OnStartTurn;
            @StartTurn.performed += instance.OnStartTurn;
            @StartTurn.canceled += instance.OnStartTurn;
        }

        private void UnregisterCallbacks(ITurnControlsMapActions instance)
        {
            @StartTurn.started -= instance.OnStartTurn;
            @StartTurn.performed -= instance.OnStartTurn;
            @StartTurn.canceled -= instance.OnStartTurn;
        }

        public void RemoveCallbacks(ITurnControlsMapActions instance)
        {
            if (m_Wrapper.m_TurnControlsMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITurnControlsMapActions instance)
        {
            foreach (var item in m_Wrapper.m_TurnControlsMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TurnControlsMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TurnControlsMapActions @TurnControlsMap => new TurnControlsMapActions(this);
    public interface ITurnControlsMapActions
    {
        void OnStartTurn(InputAction.CallbackContext context);
    }
}
